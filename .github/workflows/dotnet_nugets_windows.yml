name: Build Nuget - (windowns-latest, win-x64)

on:
  workflow_dispatch:

jobs:
  build_nuget_windows:
    runs-on: windows-latest

    steps:
      - name: 🧬 Clonando repositório simbiótico
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: ⚙️ Iniciando ambiente MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: 🛠️ Instalando dotnet-t4
        run: |
          dotnet tool install --global dotnet-t4 || echo "⚠️ Falha ao instalar dotnet-t4, prosseguindo..."

      - name: 🔄 Atualizando tags do Git
        run: |
          git fetch --unshallow --tags --recurse-submodules=no || echo "⚠️ Não foi possível atualizar todas as tags"

      - name: 🧠 Coletando versão simbiótica
        id: get_version
        shell: bash
        run: |
          set -eo pipefail
          version=$(./utl/version_number.py || echo "0.0.0-simbiotico")
          version_trimmed=$(echo $version | sed 's/\+.*//')
          echo "📦 Versão gerada: $version"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "version_trimmed=$version_trimmed" >> $GITHUB_OUTPUT

      - name: 🧱 Configurando build simbiótico .NET Core
        run: |
          cmake -S . -B build -G Ninja `
            -Dvw_BUILD_NET_CORE=On `
            -Dvw_DOTNET_USE_MSPROJECT=Off `
            -DVW_NUGET_PACKAGE_NAME=VowpalWabbit `
            -DVW_NUGET_PACKAGE_VERSION="${{ steps.get_version.outputs.version }}" `
            -DVW_NUGET_PACKAGE_VERSION_TRIMMED="${{ steps.get_version.outputs.version_trimmed }}" `
            -DVW_FEAT_FLATBUFFERS=Off `
            -DRAPIDJSON_SYS_DEP=Off `
            -DFMT_SYS_DEP=Off `
            -DSPDLOG_SYS_DEP=Off `
            -DVW_ZLIB_SYS_DEP=Off `
            -DVW_BOOST_MATH_SYS_DEP=Off `
            -DVW_BUILD_VW_C_WRAPPER=Off `
            -DBUILD_TESTING=Off `
            -DBUILD_SHARED_LIBS=Off

      - name: 🧪 Compilando .NET Core
        run: cmake --build build --config Release

      - name: 📦 Instalando build simbiótico
        run: cmake --install build --prefix ./nuget_staging

      - name: 🧾 Empacotando Nuget
        id: generate_nuget
        shell: powershell
        run: |
          Copy-Item dotnetcore_runtime.nuspec nuget_staging/
          cd nuget_staging
          nuget pack dotnetcore_runtime.nuspec
          $NugetFileName = Get-ChildItem *runtime*.nupkg -Name
          echo "NugetFileName=$NugetFileName" >> $env:GITHUB_OUTPUT
          Write-Host "✅ Pacote gerado: $NugetFileName"

      - name: ☁️ Enviando artefato para o GitHub
        uses: actions/upload-artifact@v4
        with:
          name: VowpalWabbit.runtime.win-x64.${{ steps.get_version.outputs.version }}
          path: nuget_staging/${{ steps.generate_nuget.outputs.NugetFileName }}
